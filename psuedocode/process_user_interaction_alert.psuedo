BEGIN

    read interaction_ID 

    If Interaction_ID is not in defined list:
        Raise InvalidInteractionIDError

    template_document = read "Template_User_Interaction" collection where Interaction_ID matches
    If template_document Not found:
        Raise DocumentNotFoundError

    log_id = Get next available Interaction_Log_ID
    now = Current UTC timestamp

    #check the parameter array list against the parameters on Template_User_Interaction
    #if an error occur insert data into interaction_log_record only with status="Error" and The error reason

    // Arrange data according to the  template_document
 

    interaction_log_record = {
        Interaction_Log_ID: log_id(sequence),
        Interaction_ID: from template_document,
        User_Interaction_Type: from template_document,
        CreateDTM: now,
        delegate_user_id: from template_document,
        Created_By: from template_document,
        Request_Mode: from template_document,
        User_Transaction_Status: < "Open","error","completed" >,
        Parameters: from template_document or [],
        Transaction_Status_DTM: now,
        Transaction_Status_Reason:"status reason",
        ToDo_On: from template_document
    }

    progress_log_record = {
        Interaction_Log_ID: log_id(sequence),
        Interaction_ID: from template_document,
        User_Interaction_Type: from template_document,
        CreateDTM: now,
        delegate_user_id: from template_document,
        Created_By: from template_document,
        Request_Mode: from template_document,
        User_Transaction_Status: "Open",
        Parameters: from template_document or [],
        Transaction_Status_DTM: now,
        ToDo_On: from template_document
    }

    // *** Insert data into database
    Try:
        Insert interaction_log_record into "User_Interaction_Log"
        Insert progress_log_record into "User_Interaction_progress_Log"
    Catch PyMongoError:
        Raise DataInsertError

    Return dictionary with message "Alert created" and Interaction_Log_ID

Catch BaseCustomException:
    Re-raise exception

Catch general Exception:
    Raise DatabaseConnectionError
END



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
(utils/get_next_log_id/get_next_log_id.py)


BEGIN
    Try:
        last = Fetch one document from "User_Interaction_Log" sorted by Interaction_Log_ID descending

        If last document exists:
            Return last.Interaction_Log_ID + 1
        Else:
            Return 1

    Catch PyMongoError:
        Raise DatabaseConnectionError with message and error details
END
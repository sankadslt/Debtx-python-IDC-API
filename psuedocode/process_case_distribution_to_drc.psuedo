BEGIN
Function process_case_distribution_to_drc(case_id, Created_By):
    Initialize session to None

    Try:
        Start a MongoDB session
        Begin transaction

        ----------------------------
        # Fetch case document
        case_document = find case in Case_details where case_id = case_id
        If case_document not found:
            Raise CaseIdNotFoundError

        # Get case_distribution_batch_id
        batch_id = case_document.case_distribution_batch_id
        If batch_id is missing:
            Raise DataFetchError

        # Fetch approver document using batch_id
        approver_document = find in tmp_forwarded_approver where approver_reference = batch_id

        # Fetch DRC document using case_id
        drc_document = find in Tmp_Case_Distribution_DRC_Details where case_id = case_id
        If drc_document not found:
            Raise DataFetchError

        # Extract drc_id (new_drc_id or fallback to drc_id)
        drc_id = drc_document.new_drc_id or drc_document.drc_id

        # Update proceed_on in DRC collection
        Update Tmp_Case_Distribution_DRC_Details where case_id = case_id:
            Set proceed_on = current UTC time

        # Extract remark from approver document if exists
        remark_value = first remark in approver_document.remark (if available)

        ----------------------------
        # Prepare update data for Case_details
        update_data = {
            Set case_current_status = "Open With Agent",
            Push:
                case_status: { case_status: "Open With Agent" }
                drc: {
                    DRC_status: "Open With Agent",
                    Created_dtm = now,
                    status_dtm = now,
                    drc_id = drc_id
                },
                approve: {
                    Approval_type = "DRC_Distribution",
                    Approved_by = approver_document.approved_deligated_by (if available),
                    Approved_on = approver_document.created_on (if available),
                    remark = remark_value
                }
        }

        # Apply update to Case_details
        result = update Case_details where case_id = case_id with update_data
        If update fails (modified_count == 0):
            Raise DocumentUpdateError

        ----------------------------
        # API Call to get case_phase
        response = call GET API with param case_status = "Open With Agent"
        If response fails or times out:
            Raise ValidationError

        Parse response JSON to get case_phase
        If case_phase is missing or "Unknown":
            Raise ValidationError

        ----------------------------
        # Determine expiration date for monitoring (3 months from now)
        created_dtm = current UTC time
        monitor_expir_dtm = last day of month, 3 months from created_dtm

        ----------------------------
        # Insert into Case_Monitor_Log
        Insert into Case_Monitor_Log:
            {
                doc_version = 1.0,
                case_id = case_id,
                Created_dtm = created_dtm,
                Case_Phase = case_phase,
                Monitor_Expir_Dtm = monitor_expir_dtm,
                Last_Monitor_Dtm = now
            }

        # Insert into Case_Monitor
        Insert into Case_Monitor:
            {
                doc_version = 1.0,
                case_id = case_id,
                Created_dtm = created_dtm,
                Created_By = Created_By,
                Case_Phase = case_phase,
                Monitor_Expir_Dtm = monitor_expir_dtm,
                Last_Monitor_Dtm = now,
                Last_Requested_On = null
            }

        ----------------------------
        Commit transaction
        Return success message

    Except BaseCustomException as e:
        If session is in transaction:
            Abort transaction
        Reraise exception

    Except PyMongoError as e:
        If session is in transaction:
            Abort transaction
        Raise DatabaseConnectionError

    Except Exception as e:
        If session is in transaction:
            Abort transaction
        Reraise exception
END